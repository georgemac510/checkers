parameter (pair (pair (pair (int %start_x) (int %start_y)) (int %target_x)) (int %target_y));
storage   (pair (pair (pair (pair (map %board int (map int int)) (nat %currentPlayer)) (bool %isOver)) (map %players int address)) (int %winner));
code
  {
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # storage.pair(params, storage)
    SWAP;       # pair(params, storage).storage
    CAR;        # params.storage
    # Entry point: playerMove # params.storage
    # sp.verify((((self.data.currentPlayer == 1) & (params.start_y <= params.target_y)) | ((self.data.currentPlayer == 2) & (params.start_y >= params.target_y))) | (self.data.board[params.start_x][params.start_y] < 0), message = sp.unit) # params.storage
    PUSH nat 1; # nat.params.storage
    DIG 2;      # storage.nat.params
    DUP;        # storage.storage.nat.params
    DUG 3;      # storage.nat.params.storage
    CAAADR;     # nat.nat.params.storage
    COMPARE;    # int.params.storage
    EQ;         # bool.params.storage
    IF
      {
        DUP;        # params.params.storage
        CDR;        # int.params.storage
        SWAP;       # params.int.storage
        DUP;        # params.params.int.storage
        DUG 2;      # params.int.params.storage
        CAADR;      # int.int.params.storage
        COMPARE;    # int.params.storage
        LE;         # bool.params.storage
      }
      {
        PUSH bool False; # bool.params.storage
      }; # bool.params.storage
    IF
      {
        PUSH bool True; # bool.params.storage
      }
      {
        PUSH nat 2; # nat.params.storage
        DIG 2;      # storage.nat.params
        DUP;        # storage.storage.nat.params
        DUG 3;      # storage.nat.params.storage
        CAAADR;     # nat.nat.params.storage
        COMPARE;    # int.params.storage
        EQ;         # bool.params.storage
        IF
          {
            DUP;        # params.params.storage
            CDR;        # int.params.storage
            SWAP;       # params.int.storage
            DUP;        # params.params.int.storage
            DUG 2;      # params.int.params.storage
            CAADR;      # int.int.params.storage
            COMPARE;    # int.params.storage
            GE;         # bool.params.storage
          }
          {
            PUSH bool False; # bool.params.storage
          }; # bool.params.storage
      }; # bool.params.storage
    IF
      {
        PUSH bool True; # bool.params.storage
      }
      {
        PUSH int 0; # int.params.storage
        DIG 2;      # storage.int.params
        DUP;        # storage.storage.int.params
        DUG 3;      # storage.int.params.storage
        CAAAAR;     # map int (map int int).int.params.storage
        DIG 2;      # params.map int (map int int).int.storage
        DUP;        # params.params.map int (map int int).int.storage
        DUG 3;      # params.map int (map int int).int.params.storage
        CAAAR;      # int.map int (map int int).int.params.storage
        GET;        # option (map int int).int.params.storage
        IF_SOME
          {}
          {
            PUSH unit Unit; # unit.int.params.storage
            FAILWITH;   # FAILED
          }; # map int int.int.params.storage
        DIG 2;      # params.map int int.int.storage
        DUP;        # params.params.map int int.int.storage
        DUG 3;      # params.map int int.int.params.storage
        CAADR;      # int.map int int.int.params.storage
        GET;        # option int.int.params.storage
        IF_SOME
          {}
          {
            PUSH unit Unit; # unit.int.params.storage
            FAILWITH;   # FAILED
          }; # int.int.params.storage
        COMPARE;    # int.params.storage
        LT;         # bool.params.storage
      }; # bool.params.storage
    IF
      {}
      {
        PUSH unit Unit; # unit.params.storage
        FAILWITH;   # FAILED
      }; # params.storage
    # shouldJump = sp.newLocal("shouldJump", False, sp.TBool) # params.storage
    PUSH bool False; # bool.params.storage
    # enemyPlayer = sp.newLocal("enemyPlayer", abs(3 - (sp.toInt(self.data.currentPlayer))), sp.TNat) # bool.params.storage
    DIG 2;      # storage.bool.params
    DUP;        # storage.storage.bool.params
    DUG 3;      # storage.bool.params.storage
    CAAADR;     # nat.bool.params.storage
    INT;        # int.bool.params.storage
    PUSH int 3; # int.int.bool.params.storage
    SUB;        # int.bool.params.storage
    ABS;        # nat.bool.params.storage
    # for x in sp.range(0, 8): ... (sp.TInt) # nat.bool.params.storage
    PUSH int 0; # int.nat.bool.params.storage
    PUSH bool True; # bool.int.nat.bool.params.storage
    LOOP
      {
        # for y in sp.range(0, 8): ... (sp.TInt) # int.nat.bool.params.storage
        PUSH int 0; # int.int.nat.bool.params.storage
        PUSH bool True; # bool.int.int.nat.bool.params.storage
        LOOP
          {
            # If (abs(self.data.board[x][y])) == self.data.currentPlayer... # int.int.nat.bool.params.storage
            DIG 5;      # storage.int.int.nat.bool.params
            DUP;        # storage.storage.int.int.nat.bool.params
            DUG 6;      # storage.int.int.nat.bool.params.storage
            CAAADR;     # nat.int.int.nat.bool.params.storage
            DIG 6;      # storage.nat.int.int.nat.bool.params
            DUP;        # storage.storage.nat.int.int.nat.bool.params
            DUG 7;      # storage.nat.int.int.nat.bool.params.storage
            CAAAAR;     # map int (map int int).nat.int.int.nat.bool.params.storage
            DIG 3;      # int.map int (map int int).nat.int.nat.bool.params.storage
            DUP;        # int.int.map int (map int int).nat.int.nat.bool.params.storage
            DUG 4;      # int.map int (map int int).nat.int.int.nat.bool.params.storage
            GET;        # option (map int int).nat.int.int.nat.bool.params.storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.nat.int.int.nat.bool.params.storage
                FAILWITH;   # FAILED
              }; # map int int.nat.int.int.nat.bool.params.storage
            DIG 2;      # int.map int int.nat.int.nat.bool.params.storage
            DUP;        # int.int.map int int.nat.int.nat.bool.params.storage
            DUG 3;      # int.map int int.nat.int.int.nat.bool.params.storage
            GET;        # option int.nat.int.int.nat.bool.params.storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.nat.int.int.nat.bool.params.storage
                FAILWITH;   # FAILED
              }; # int.nat.int.int.nat.bool.params.storage
            ABS;        # nat.nat.int.int.nat.bool.params.storage
            COMPARE;    # int.int.int.nat.bool.params.storage
            EQ;         # bool.int.int.nat.bool.params.storage
            IF
              {
                # If x > 1... # int.int.nat.bool.params.storage
                PUSH int 1; # int.int.int.nat.bool.params.storage
                DIG 2;      # int.int.int.nat.bool.params.storage
                DUP;        # int.int.int.int.nat.bool.params.storage
                DUG 3;      # int.int.int.int.nat.bool.params.storage
                COMPARE;    # int.int.int.nat.bool.params.storage
                GT;         # bool.int.int.nat.bool.params.storage
                IF
                  {
                    SWAP;       # int.int.nat.bool.params.storage
                    DUP;        # int.int.int.nat.bool.params.storage
                    DUG 2;      # int.int.int.nat.bool.params.storage
                    # for k in sp.range(0, x): ... (sp.TInt) # int.int.int.nat.bool.params.storage
                    PUSH int 0; # int.int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.int.nat.bool.params.storage
                    DIG 2;      # int.int.int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                    DUG 3;      # int.int.int.int.int.int.nat.bool.params.storage
                    COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                    GT;         # bool.int.int.int.int.nat.bool.params.storage
                    LOOP
                      {
                        # If (((~ shouldJump) & (self.data.board[k][y] == 0)) & ((abs(self.data.board[k + 1][y])) == enemyPlayer)) & (((self.data.board[x][y] > -1) & (k == (x - 2))) | (self.data.board[x][y] < 0))... # int.int.int.int.nat.bool.params.storage
                        DIG 5;      # bool.int.int.int.int.nat.params.storage
                        DUP;        # bool.bool.int.int.int.int.nat.params.storage
                        DUG 6;      # bool.int.int.int.int.nat.bool.params.storage
                        NOT;        # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int 0; # int.int.int.int.int.nat.bool.params.storage
                            DIG 8;      # storage.int.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.int.nat.bool.params
                            DUG 9;      # storage.int.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            DIG 4;      # nat.int.int.int.int.bool.params.storage
                            DUP;        # nat.nat.int.int.int.int.bool.params.storage
                            DUG 5;      # nat.int.int.int.int.nat.bool.params.storage
                            DIG 8;      # storage.nat.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.nat.int.int.int.int.nat.bool.params
                            DUG 9;      # storage.nat.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).nat.int.int.int.int.nat.bool.params.storage
                            PUSH int 1; # int.map int (map int int).nat.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.int.map int (map int int).nat.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.map int (map int int).nat.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.int.map int (map int int).nat.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.map int (map int int).nat.int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).nat.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.nat.int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int int.nat.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.nat.int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int int.nat.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.nat.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.nat.int.int.int.int.nat.bool.params.storage
                            ABS;        # nat.nat.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int -1; # int.int.int.int.int.nat.bool.params.storage
                            DIG 8;      # storage.int.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.int.nat.bool.params
                            DUG 9;      # storage.int.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            DIG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUG 6;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH int 2; # int.int.int.int.int.nat.bool.params.storage
                                DIG 4;      # int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                                DUG 5;      # int.int.int.int.int.int.nat.bool.params.storage
                                SUB;        # int.int.int.int.int.nat.bool.params.storage
                                SWAP;       # int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                                DUG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                                EQ;         # bool.int.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH bool True; # bool.int.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH int 0; # int.int.int.int.int.nat.bool.params.storage
                                DIG 8;      # storage.int.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.int.nat.bool.params
                                DUG 9;      # storage.int.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                DIG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                                DUG 6;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.int.nat.bool.params.storage
                                DIG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.int.nat.bool.params.storage
                                DUG 5;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                                LT;         # bool.int.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            # shouldJump.set(True) # int.int.int.int.nat.bool.params.storage
                            DIG 5;      # bool.int.int.int.int.nat.params.storage
                            PUSH bool True; # bool.bool.int.int.int.int.nat.params.storage
                            SWAP;       # bool.bool.int.int.int.int.nat.params.storage
                            DROP;       # bool.int.int.int.int.nat.params.storage
                            DUG 5;      # int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.int.int.int.int.nat.bool.params.storage
                            # for kk in sp.range(k + 2, x): ... (sp.TInt) # int.int.int.int.int.nat.bool.params.storage
                            PUSH int 2; # int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.int.int.int.nat.bool.params.storage
                            LOOP
                              {
                                # If self.data.board[kk][y] != 0... # int.int.int.int.int.int.nat.bool.params.storage
                                PUSH int 0; # int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 10;     # storage.int.int.int.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.int.int.int.nat.bool.params
                                DUG 11;     # storage.int.int.int.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.map int (map int int).int.int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 6;      # int.map int int.int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.int.int.int.nat.bool.params.storage
                                DUG 7;      # int.map int int.int.int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.int.nat.bool.params.storage
                                NEQ;        # bool.int.int.int.int.int.int.nat.bool.params.storage
                                IF
                                  {
                                    # shouldJump.set(False) # int.int.int.int.int.int.nat.bool.params.storage
                                    DIG 7;      # bool.int.int.int.int.int.int.nat.params.storage
                                    PUSH bool False; # bool.bool.int.int.int.int.int.int.nat.params.storage
                                    SWAP;       # bool.bool.int.int.int.int.int.int.nat.params.storage
                                    DROP;       # bool.int.int.int.int.int.int.nat.params.storage
                                    DUG 7;      # int.int.int.int.int.int.nat.bool.params.storage
                                  }
                                  {}; # int.int.int.int.int.int.nat.bool.params.storage
                                # loop step # int.int.int.int.int.int.nat.bool.params.storage
                                PUSH int 1; # int.int.int.int.int.int.int.nat.bool.params.storage
                                ADD;        # int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.int.nat.bool.params.storage
                                GT;         # bool.int.int.int.int.int.int.nat.bool.params.storage
                              }; # int.int.int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.int.nat.bool.params.storage
                          }
                          {}; # int.int.int.int.nat.bool.params.storage
                        # loop step # int.int.int.int.nat.bool.params.storage
                        PUSH int 1; # int.int.int.int.int.nat.bool.params.storage
                        ADD;        # int.int.int.int.nat.bool.params.storage
                        DUP;        # int.int.int.int.int.nat.bool.params.storage
                        DIG 2;      # int.int.int.int.int.nat.bool.params.storage
                        DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                        DUG 3;      # int.int.int.int.int.int.nat.bool.params.storage
                        COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                        GT;         # bool.int.int.int.int.nat.bool.params.storage
                      }; # int.int.int.int.nat.bool.params.storage
                    DROP;       # int.int.int.nat.bool.params.storage
                    DROP;       # int.int.nat.bool.params.storage
                  }
                  {}; # int.int.nat.bool.params.storage
                # If x < 6... # int.int.nat.bool.params.storage
                PUSH int 6; # int.int.int.nat.bool.params.storage
                DIG 2;      # int.int.int.nat.bool.params.storage
                DUP;        # int.int.int.int.nat.bool.params.storage
                DUG 3;      # int.int.int.int.nat.bool.params.storage
                COMPARE;    # int.int.int.nat.bool.params.storage
                LT;         # bool.int.int.nat.bool.params.storage
                IF
                  {
                    # for k in sp.range(x + 1, 7): ... (sp.TInt) # int.int.nat.bool.params.storage
                    PUSH int 1; # int.int.int.nat.bool.params.storage
                    DIG 2;      # int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.nat.bool.params.storage
                    DUG 3;      # int.int.int.int.nat.bool.params.storage
                    ADD;        # int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.nat.bool.params.storage
                    PUSH int 7; # int.int.int.int.int.nat.bool.params.storage
                    COMPARE;    # int.int.int.int.nat.bool.params.storage
                    GT;         # bool.int.int.int.nat.bool.params.storage
                    LOOP
                      {
                        # If (((~ shouldJump) & (self.data.board[k + 1][y] == 0)) & ((abs(self.data.board[k][y])) == enemyPlayer)) & (((self.data.board[x][y] > -1) & (k == (x + 1))) | (self.data.board[x][y] < 0))... # int.int.int.nat.bool.params.storage
                        DIG 4;      # bool.int.int.int.nat.params.storage
                        DUP;        # bool.bool.int.int.int.nat.params.storage
                        DUG 5;      # bool.int.int.int.nat.bool.params.storage
                        NOT;        # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int 0; # int.int.int.int.nat.bool.params.storage
                            DIG 7;      # storage.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.nat.bool.params
                            DUG 8;      # storage.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.nat.bool.params.storage
                            PUSH int 1; # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUG 4;      # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            ADD;        # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            DIG 3;      # nat.int.int.int.bool.params.storage
                            DUP;        # nat.nat.int.int.int.bool.params.storage
                            DUG 4;      # nat.int.int.int.nat.bool.params.storage
                            DIG 7;      # storage.nat.int.int.int.nat.bool.params
                            DUP;        # storage.storage.nat.int.int.int.nat.bool.params
                            DUG 8;      # storage.nat.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).nat.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.map int (map int int).nat.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).nat.int.int.nat.bool.params.storage
                            DUG 3;      # int.map int (map int int).nat.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).nat.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.nat.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.map int int.nat.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.nat.int.int.nat.bool.params.storage
                            DUG 4;      # int.map int int.nat.int.int.int.nat.bool.params.storage
                            GET;        # option int.nat.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.nat.int.int.int.nat.bool.params.storage
                            ABS;        # nat.nat.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int -1; # int.int.int.int.nat.bool.params.storage
                            DIG 7;      # storage.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.nat.bool.params
                            DUG 8;      # storage.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH int 1; # int.int.int.int.nat.bool.params.storage
                                DIG 3;      # int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.nat.bool.params.storage
                                DUG 4;      # int.int.int.int.int.nat.bool.params.storage
                                ADD;        # int.int.int.int.nat.bool.params.storage
                                SWAP;       # int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.nat.bool.params.storage
                                DUG 2;      # int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.nat.bool.params.storage
                                EQ;         # bool.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH bool True; # bool.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH int 0; # int.int.int.int.nat.bool.params.storage
                                DIG 7;      # storage.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.nat.bool.params
                                DUG 8;      # storage.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.nat.bool.params.storage
                                DIG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.nat.bool.params.storage
                                DUG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.nat.bool.params.storage
                                DIG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.nat.bool.params.storage
                                DUG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.nat.bool.params.storage
                                LT;         # bool.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            # shouldJump.set(True) # int.int.int.nat.bool.params.storage
                            DIG 4;      # bool.int.int.int.nat.params.storage
                            PUSH bool True; # bool.bool.int.int.int.nat.params.storage
                            SWAP;       # bool.bool.int.int.int.nat.params.storage
                            DROP;       # bool.int.int.int.nat.params.storage
                            DUG 4;      # int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.nat.bool.params.storage
                            # for kk in sp.range(x + 1, k): ... (sp.TInt) # int.int.int.int.nat.bool.params.storage
                            PUSH int 1; # int.int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                            DUG 5;      # int.int.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.int.int.nat.bool.params.storage
                            LOOP
                              {
                                # If self.data.board[kk][y] != 0... # int.int.int.int.int.nat.bool.params.storage
                                PUSH int 0; # int.int.int.int.int.int.nat.bool.params.storage
                                DIG 9;      # storage.int.int.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.int.int.nat.bool.params
                                DUG 10;     # storage.int.int.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 5;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.int.int.nat.bool.params.storage
                                DUG 6;      # int.map int int.int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.nat.bool.params.storage
                                NEQ;        # bool.int.int.int.int.int.nat.bool.params.storage
                                IF
                                  {
                                    # shouldJump.set(False) # int.int.int.int.int.nat.bool.params.storage
                                    DIG 6;      # bool.int.int.int.int.int.nat.params.storage
                                    PUSH bool False; # bool.bool.int.int.int.int.int.nat.params.storage
                                    SWAP;       # bool.bool.int.int.int.int.int.nat.params.storage
                                    DROP;       # bool.int.int.int.int.int.nat.params.storage
                                    DUG 6;      # int.int.int.int.int.nat.bool.params.storage
                                  }
                                  {}; # int.int.int.int.int.nat.bool.params.storage
                                # loop step # int.int.int.int.int.nat.bool.params.storage
                                PUSH int 1; # int.int.int.int.int.int.nat.bool.params.storage
                                ADD;        # int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.nat.bool.params.storage
                                GT;         # bool.int.int.int.int.int.nat.bool.params.storage
                              }; # int.int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.nat.bool.params.storage
                          }
                          {}; # int.int.int.nat.bool.params.storage
                        # loop step # int.int.int.nat.bool.params.storage
                        PUSH int 1; # int.int.int.int.nat.bool.params.storage
                        ADD;        # int.int.int.nat.bool.params.storage
                        DUP;        # int.int.int.int.nat.bool.params.storage
                        PUSH int 7; # int.int.int.int.int.nat.bool.params.storage
                        COMPARE;    # int.int.int.int.nat.bool.params.storage
                        GT;         # bool.int.int.int.nat.bool.params.storage
                      }; # int.int.int.nat.bool.params.storage
                    DROP;       # int.int.nat.bool.params.storage
                  }
                  {}; # int.int.nat.bool.params.storage
                # If (y < 6) & ((self.data.board[x][y] != 2) | ((abs(self.data.board[x][y])) < 0))... # int.int.nat.bool.params.storage
                DUP;        # int.int.int.nat.bool.params.storage
                PUSH int 6; # int.int.int.int.nat.bool.params.storage
                COMPARE;    # int.int.int.nat.bool.params.storage
                GT;         # bool.int.int.nat.bool.params.storage
                IF
                  {
                    PUSH int 2; # int.int.int.nat.bool.params.storage
                    DIG 6;      # storage.int.int.int.nat.bool.params
                    DUP;        # storage.storage.int.int.int.nat.bool.params
                    DUG 7;      # storage.int.int.int.nat.bool.params.storage
                    CAAAAR;     # map int (map int int).int.int.int.nat.bool.params.storage
                    DIG 3;      # int.map int (map int int).int.int.nat.bool.params.storage
                    DUP;        # int.int.map int (map int int).int.int.nat.bool.params.storage
                    DUG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                    GET;        # option (map int int).int.int.int.nat.bool.params.storage
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.nat.bool.params.storage
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.nat.bool.params.storage
                    DIG 2;      # int.map int int.int.int.nat.bool.params.storage
                    DUP;        # int.int.map int int.int.int.nat.bool.params.storage
                    DUG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                    GET;        # option int.int.int.int.nat.bool.params.storage
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.nat.bool.params.storage
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.nat.bool.params.storage
                    COMPARE;    # int.int.int.nat.bool.params.storage
                    NEQ;        # bool.int.int.nat.bool.params.storage
                    IF
                      {
                        PUSH bool True; # bool.int.int.nat.bool.params.storage
                      }
                      {
                        PUSH nat 0; # nat.int.int.nat.bool.params.storage
                        DIG 6;      # storage.nat.int.int.nat.bool.params
                        DUP;        # storage.storage.nat.int.int.nat.bool.params
                        DUG 7;      # storage.nat.int.int.nat.bool.params.storage
                        CAAAAR;     # map int (map int int).nat.int.int.nat.bool.params.storage
                        DIG 3;      # int.map int (map int int).nat.int.nat.bool.params.storage
                        DUP;        # int.int.map int (map int int).nat.int.nat.bool.params.storage
                        DUG 4;      # int.map int (map int int).nat.int.int.nat.bool.params.storage
                        GET;        # option (map int int).nat.int.int.nat.bool.params.storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit.nat.int.int.nat.bool.params.storage
                            FAILWITH;   # FAILED
                          }; # map int int.nat.int.int.nat.bool.params.storage
                        DIG 2;      # int.map int int.nat.int.nat.bool.params.storage
                        DUP;        # int.int.map int int.nat.int.nat.bool.params.storage
                        DUG 3;      # int.map int int.nat.int.int.nat.bool.params.storage
                        GET;        # option int.nat.int.int.nat.bool.params.storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit.nat.int.int.nat.bool.params.storage
                            FAILWITH;   # FAILED
                          }; # int.nat.int.int.nat.bool.params.storage
                        ABS;        # nat.nat.int.int.nat.bool.params.storage
                        COMPARE;    # int.int.int.nat.bool.params.storage
                        LT;         # bool.int.int.nat.bool.params.storage
                      }; # bool.int.int.nat.bool.params.storage
                  }
                  {
                    PUSH bool False; # bool.int.int.nat.bool.params.storage
                  }; # bool.int.int.nat.bool.params.storage
                IF
                  {
                    # for k in sp.range(y + 1, 7): ... (sp.TInt) # int.int.nat.bool.params.storage
                    DUP;        # int.int.int.nat.bool.params.storage
                    PUSH int 1; # int.int.int.int.nat.bool.params.storage
                    ADD;        # int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.nat.bool.params.storage
                    PUSH int 7; # int.int.int.int.int.nat.bool.params.storage
                    COMPARE;    # int.int.int.int.nat.bool.params.storage
                    GT;         # bool.int.int.int.nat.bool.params.storage
                    LOOP
                      {
                        # If (((~ shouldJump) & (self.data.board[x][k + 1] == 0)) & ((abs(self.data.board[x][k])) == enemyPlayer)) & (((self.data.board[x][y] > -1) & (k == (y + 1))) | (self.data.board[x][y] < 0))... # int.int.int.nat.bool.params.storage
                        DIG 4;      # bool.int.int.int.nat.params.storage
                        DUP;        # bool.bool.int.int.int.nat.params.storage
                        DUG 5;      # bool.int.int.int.nat.bool.params.storage
                        NOT;        # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int 0; # int.int.int.int.nat.bool.params.storage
                            DIG 7;      # storage.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.nat.bool.params
                            DUG 8;      # storage.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.nat.bool.params.storage
                            PUSH int 1; # int.map int int.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.int.map int int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.map int int.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.int.map int int.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.map int int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            DIG 3;      # nat.int.int.int.bool.params.storage
                            DUP;        # nat.nat.int.int.int.bool.params.storage
                            DUG 4;      # nat.int.int.int.nat.bool.params.storage
                            DIG 7;      # storage.nat.int.int.int.nat.bool.params
                            DUP;        # storage.storage.nat.int.int.int.nat.bool.params
                            DUG 8;      # storage.nat.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).nat.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int (map int int).nat.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).nat.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int (map int int).nat.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).nat.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.nat.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.map int int.nat.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.nat.int.int.nat.bool.params.storage
                            DUG 3;      # int.map int int.nat.int.int.int.nat.bool.params.storage
                            GET;        # option int.nat.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.nat.int.int.int.nat.bool.params.storage
                            ABS;        # nat.nat.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int -1; # int.int.int.int.nat.bool.params.storage
                            DIG 7;      # storage.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.nat.bool.params
                            DUG 8;      # storage.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH int 1; # int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.int.int.int.int.nat.bool.params.storage
                                ADD;        # int.int.int.int.nat.bool.params.storage
                                SWAP;       # int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.nat.bool.params.storage
                                DUG 2;      # int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.nat.bool.params.storage
                                EQ;         # bool.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH bool True; # bool.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH int 0; # int.int.int.int.nat.bool.params.storage
                                DIG 7;      # storage.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.nat.bool.params
                                DUG 8;      # storage.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.nat.bool.params.storage
                                DIG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.nat.bool.params.storage
                                DUG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.nat.bool.params.storage
                                DIG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.nat.bool.params.storage
                                DUG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.nat.bool.params.storage
                                LT;         # bool.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.nat.bool.params.storage
                        IF
                          {
                            # shouldJump.set(True) # int.int.int.nat.bool.params.storage
                            DIG 4;      # bool.int.int.int.nat.params.storage
                            PUSH bool True; # bool.bool.int.int.int.nat.params.storage
                            SWAP;       # bool.bool.int.int.int.nat.params.storage
                            DROP;       # bool.int.int.int.nat.params.storage
                            DUG 4;      # int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.nat.bool.params.storage
                            # for kk in sp.range(y + 1, k): ... (sp.TInt) # int.int.int.int.nat.bool.params.storage
                            PUSH int 1; # int.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.int.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.int.int.nat.bool.params.storage
                            LOOP
                              {
                                # If self.data.board[x][kk] != 0... # int.int.int.int.int.nat.bool.params.storage
                                PUSH int 0; # int.int.int.int.int.int.nat.bool.params.storage
                                DIG 9;      # storage.int.int.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.int.int.nat.bool.params
                                DUG 10;     # storage.int.int.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                DIG 6;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                DUG 7;      # int.map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.map int int.int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.nat.bool.params.storage
                                NEQ;        # bool.int.int.int.int.int.nat.bool.params.storage
                                IF
                                  {
                                    # shouldJump.set(False) # int.int.int.int.int.nat.bool.params.storage
                                    DIG 6;      # bool.int.int.int.int.int.nat.params.storage
                                    PUSH bool False; # bool.bool.int.int.int.int.int.nat.params.storage
                                    SWAP;       # bool.bool.int.int.int.int.int.nat.params.storage
                                    DROP;       # bool.int.int.int.int.int.nat.params.storage
                                    DUG 6;      # int.int.int.int.int.nat.bool.params.storage
                                  }
                                  {}; # int.int.int.int.int.nat.bool.params.storage
                                # loop step # int.int.int.int.int.nat.bool.params.storage
                                PUSH int 1; # int.int.int.int.int.int.nat.bool.params.storage
                                ADD;        # int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.nat.bool.params.storage
                                GT;         # bool.int.int.int.int.int.nat.bool.params.storage
                              }; # int.int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.nat.bool.params.storage
                          }
                          {}; # int.int.int.nat.bool.params.storage
                        # loop step # int.int.int.nat.bool.params.storage
                        PUSH int 1; # int.int.int.int.nat.bool.params.storage
                        ADD;        # int.int.int.nat.bool.params.storage
                        DUP;        # int.int.int.int.nat.bool.params.storage
                        PUSH int 7; # int.int.int.int.int.nat.bool.params.storage
                        COMPARE;    # int.int.int.int.nat.bool.params.storage
                        GT;         # bool.int.int.int.nat.bool.params.storage
                      }; # int.int.int.nat.bool.params.storage
                    DROP;       # int.int.nat.bool.params.storage
                  }
                  {}; # int.int.nat.bool.params.storage
                # If (y > 1) & ((self.data.board[x][y] != 1) | ((abs(self.data.board[x][y])) < 0))... # int.int.nat.bool.params.storage
                DUP;        # int.int.int.nat.bool.params.storage
                PUSH int 1; # int.int.int.int.nat.bool.params.storage
                COMPARE;    # int.int.int.nat.bool.params.storage
                LT;         # bool.int.int.nat.bool.params.storage
                IF
                  {
                    PUSH int 1; # int.int.int.nat.bool.params.storage
                    DIG 6;      # storage.int.int.int.nat.bool.params
                    DUP;        # storage.storage.int.int.int.nat.bool.params
                    DUG 7;      # storage.int.int.int.nat.bool.params.storage
                    CAAAAR;     # map int (map int int).int.int.int.nat.bool.params.storage
                    DIG 3;      # int.map int (map int int).int.int.nat.bool.params.storage
                    DUP;        # int.int.map int (map int int).int.int.nat.bool.params.storage
                    DUG 4;      # int.map int (map int int).int.int.int.nat.bool.params.storage
                    GET;        # option (map int int).int.int.int.nat.bool.params.storage
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.nat.bool.params.storage
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.nat.bool.params.storage
                    DIG 2;      # int.map int int.int.int.nat.bool.params.storage
                    DUP;        # int.int.map int int.int.int.nat.bool.params.storage
                    DUG 3;      # int.map int int.int.int.int.nat.bool.params.storage
                    GET;        # option int.int.int.int.nat.bool.params.storage
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.nat.bool.params.storage
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.nat.bool.params.storage
                    COMPARE;    # int.int.int.nat.bool.params.storage
                    NEQ;        # bool.int.int.nat.bool.params.storage
                    IF
                      {
                        PUSH bool True; # bool.int.int.nat.bool.params.storage
                      }
                      {
                        PUSH nat 0; # nat.int.int.nat.bool.params.storage
                        DIG 6;      # storage.nat.int.int.nat.bool.params
                        DUP;        # storage.storage.nat.int.int.nat.bool.params
                        DUG 7;      # storage.nat.int.int.nat.bool.params.storage
                        CAAAAR;     # map int (map int int).nat.int.int.nat.bool.params.storage
                        DIG 3;      # int.map int (map int int).nat.int.nat.bool.params.storage
                        DUP;        # int.int.map int (map int int).nat.int.nat.bool.params.storage
                        DUG 4;      # int.map int (map int int).nat.int.int.nat.bool.params.storage
                        GET;        # option (map int int).nat.int.int.nat.bool.params.storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit.nat.int.int.nat.bool.params.storage
                            FAILWITH;   # FAILED
                          }; # map int int.nat.int.int.nat.bool.params.storage
                        DIG 2;      # int.map int int.nat.int.nat.bool.params.storage
                        DUP;        # int.int.map int int.nat.int.nat.bool.params.storage
                        DUG 3;      # int.map int int.nat.int.int.nat.bool.params.storage
                        GET;        # option int.nat.int.int.nat.bool.params.storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit.nat.int.int.nat.bool.params.storage
                            FAILWITH;   # FAILED
                          }; # int.nat.int.int.nat.bool.params.storage
                        ABS;        # nat.nat.int.int.nat.bool.params.storage
                        COMPARE;    # int.int.int.nat.bool.params.storage
                        LT;         # bool.int.int.nat.bool.params.storage
                      }; # bool.int.int.nat.bool.params.storage
                  }
                  {
                    PUSH bool False; # bool.int.int.nat.bool.params.storage
                  }; # bool.int.int.nat.bool.params.storage
                IF
                  {
                    DUP;        # int.int.int.nat.bool.params.storage
                    # for k in sp.range(0, y): ... (sp.TInt) # int.int.int.nat.bool.params.storage
                    PUSH int 0; # int.int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.int.nat.bool.params.storage
                    DIG 2;      # int.int.int.int.int.nat.bool.params.storage
                    DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                    DUG 3;      # int.int.int.int.int.int.nat.bool.params.storage
                    COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                    GT;         # bool.int.int.int.int.nat.bool.params.storage
                    LOOP
                      {
                        # If (((~ shouldJump) & (self.data.board[x][k] == 0)) & ((abs(self.data.board[x][k + 1])) == enemyPlayer)) & (((self.data.board[x][y] > -1) & (k == (y - 2))) | (self.data.board[x][y] < 0))... # int.int.int.int.nat.bool.params.storage
                        DIG 5;      # bool.int.int.int.int.nat.params.storage
                        DUP;        # bool.bool.int.int.int.int.nat.params.storage
                        DUG 6;      # bool.int.int.int.int.nat.bool.params.storage
                        NOT;        # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int 0; # int.int.int.int.int.nat.bool.params.storage
                            DIG 8;      # storage.int.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.int.nat.bool.params
                            DUG 9;      # storage.int.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            DIG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUG 6;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            DIG 4;      # nat.int.int.int.int.bool.params.storage
                            DUP;        # nat.nat.int.int.int.int.bool.params.storage
                            DUG 5;      # nat.int.int.int.int.nat.bool.params.storage
                            DIG 8;      # storage.nat.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.nat.int.int.int.int.nat.bool.params
                            DUG 9;      # storage.nat.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).nat.int.int.int.int.nat.bool.params.storage
                            DIG 5;      # int.map int (map int int).nat.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).nat.int.int.int.nat.bool.params.storage
                            DUG 6;      # int.map int (map int int).nat.int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).nat.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.nat.int.int.int.int.nat.bool.params.storage
                            PUSH int 1; # int.map int int.nat.int.int.int.int.nat.bool.params.storage
                            DIG 3;      # int.int.map int int.nat.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.map int int.nat.int.int.int.nat.bool.params.storage
                            DUG 4;      # int.int.map int int.nat.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.map int int.nat.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.nat.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.nat.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.nat.int.int.int.int.nat.bool.params.storage
                            ABS;        # nat.nat.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                            EQ;         # bool.int.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            PUSH int -1; # int.int.int.int.int.nat.bool.params.storage
                            DIG 8;      # storage.int.int.int.int.int.nat.bool.params
                            DUP;        # storage.storage.int.int.int.int.int.nat.bool.params
                            DUG 9;      # storage.int.int.int.int.int.nat.bool.params.storage
                            CAAAAR;     # map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            DIG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                            DUG 6;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                            GET;        # option (map int int).int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # map int int.int.int.int.int.int.nat.bool.params.storage
                            DIG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.map int int.int.int.int.int.nat.bool.params.storage
                            DUG 5;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                            GET;        # option int.int.int.int.int.int.nat.bool.params.storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                FAILWITH;   # FAILED
                              }; # int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH int 2; # int.int.int.int.int.nat.bool.params.storage
                                DIG 3;      # int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                                DUG 4;      # int.int.int.int.int.int.nat.bool.params.storage
                                SUB;        # int.int.int.int.int.nat.bool.params.storage
                                SWAP;       # int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                                DUG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                                EQ;         # bool.int.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.int.nat.bool.params.storage
                            IF
                              {
                                PUSH bool True; # bool.int.int.int.int.nat.bool.params.storage
                              }
                              {
                                PUSH int 0; # int.int.int.int.int.nat.bool.params.storage
                                DIG 8;      # storage.int.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.int.nat.bool.params
                                DUG 9;      # storage.int.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                DIG 5;      # int.map int (map int int).int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.int.nat.bool.params.storage
                                DUG 6;      # int.map int (map int int).int.int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.int.nat.bool.params.storage
                                DIG 4;      # int.map int int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.int.nat.bool.params.storage
                                DUG 5;      # int.map int int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                                LT;         # bool.int.int.int.int.nat.bool.params.storage
                              }; # bool.int.int.int.int.nat.bool.params.storage
                          }
                          {
                            PUSH bool False; # bool.int.int.int.int.nat.bool.params.storage
                          }; # bool.int.int.int.int.nat.bool.params.storage
                        IF
                          {
                            # shouldJump.set(True) # int.int.int.int.nat.bool.params.storage
                            DIG 5;      # bool.int.int.int.int.nat.params.storage
                            PUSH bool True; # bool.bool.int.int.int.int.nat.params.storage
                            SWAP;       # bool.bool.int.int.int.int.nat.params.storage
                            DROP;       # bool.int.int.int.int.nat.params.storage
                            DUG 5;      # int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.nat.bool.params.storage
                            # for kk in sp.range(k + 2, y): ... (sp.TInt) # int.int.int.int.int.nat.bool.params.storage
                            PUSH int 2; # int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.int.int.nat.bool.params.storage
                            ADD;        # int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                            DIG 2;      # int.int.int.int.int.int.int.nat.bool.params.storage
                            DUP;        # int.int.int.int.int.int.int.int.nat.bool.params.storage
                            DUG 3;      # int.int.int.int.int.int.int.int.nat.bool.params.storage
                            COMPARE;    # int.int.int.int.int.int.int.nat.bool.params.storage
                            GT;         # bool.int.int.int.int.int.int.nat.bool.params.storage
                            LOOP
                              {
                                # If self.data.board[x][kk] != 0... # int.int.int.int.int.int.nat.bool.params.storage
                                PUSH int 0; # int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 10;     # storage.int.int.int.int.int.int.int.nat.bool.params
                                DUP;        # storage.storage.int.int.int.int.int.int.int.nat.bool.params
                                DUG 11;     # storage.int.int.int.int.int.int.int.nat.bool.params.storage
                                CAAAAR;     # map int (map int int).int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 7;      # int.map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int (map int int).int.int.int.int.int.int.nat.bool.params.storage
                                DUG 8;      # int.map int (map int int).int.int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option (map int int).int.int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # map int int.int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.map int int.int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.map int int.int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.map int int.int.int.int.int.int.int.int.nat.bool.params.storage
                                GET;        # option int.int.int.int.int.int.int.int.nat.bool.params.storage
                                IF_SOME
                                  {}
                                  {
                                    PUSH unit Unit; # unit.int.int.int.int.int.int.int.nat.bool.params.storage
                                    FAILWITH;   # FAILED
                                  }; # int.int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.int.nat.bool.params.storage
                                NEQ;        # bool.int.int.int.int.int.int.nat.bool.params.storage
                                IF
                                  {
                                    # shouldJump.set(False) # int.int.int.int.int.int.nat.bool.params.storage
                                    DIG 7;      # bool.int.int.int.int.int.int.nat.params.storage
                                    PUSH bool False; # bool.bool.int.int.int.int.int.int.nat.params.storage
                                    SWAP;       # bool.bool.int.int.int.int.int.int.nat.params.storage
                                    DROP;       # bool.int.int.int.int.int.int.nat.params.storage
                                    DUG 7;      # int.int.int.int.int.int.nat.bool.params.storage
                                  }
                                  {}; # int.int.int.int.int.int.nat.bool.params.storage
                                # loop step # int.int.int.int.int.int.nat.bool.params.storage
                                PUSH int 1; # int.int.int.int.int.int.int.nat.bool.params.storage
                                ADD;        # int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.int.nat.bool.params.storage
                                DIG 2;      # int.int.int.int.int.int.int.nat.bool.params.storage
                                DUP;        # int.int.int.int.int.int.int.int.nat.bool.params.storage
                                DUG 3;      # int.int.int.int.int.int.int.int.nat.bool.params.storage
                                COMPARE;    # int.int.int.int.int.int.int.nat.bool.params.storage
                                GT;         # bool.int.int.int.int.int.int.nat.bool.params.storage
                              }; # int.int.int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.int.int.nat.bool.params.storage
                            DROP;       # int.int.int.int.nat.bool.params.storage
                          }
                          {}; # int.int.int.int.nat.bool.params.storage
                        # loop step # int.int.int.int.nat.bool.params.storage
                        PUSH int 1; # int.int.int.int.int.nat.bool.params.storage
                        ADD;        # int.int.int.int.nat.bool.params.storage
                        DUP;        # int.int.int.int.int.nat.bool.params.storage
                        DIG 2;      # int.int.int.int.int.nat.bool.params.storage
                        DUP;        # int.int.int.int.int.int.nat.bool.params.storage
                        DUG 3;      # int.int.int.int.int.int.nat.bool.params.storage
                        COMPARE;    # int.int.int.int.int.nat.bool.params.storage
                        GT;         # bool.int.int.int.int.nat.bool.params.storage
                      }; # int.int.int.int.nat.bool.params.storage
                    DROP;       # int.int.int.nat.bool.params.storage
                    DROP;       # int.int.nat.bool.params.storage
                  }
                  {}; # int.int.nat.bool.params.storage
              }
              {}; # int.int.nat.bool.params.storage
            # loop step # int.int.nat.bool.params.storage
            PUSH int 1; # int.int.int.nat.bool.params.storage
            ADD;        # int.int.nat.bool.params.storage
            DUP;        # int.int.int.nat.bool.params.storage
            PUSH int 8; # int.int.int.int.nat.bool.params.storage
            COMPARE;    # int.int.int.nat.bool.params.storage
            GT;         # bool.int.int.nat.bool.params.storage
          }; # int.int.nat.bool.params.storage
        DROP;       # int.nat.bool.params.storage
        # loop step # int.nat.bool.params.storage
        PUSH int 1; # int.int.nat.bool.params.storage
        ADD;        # int.nat.bool.params.storage
        DUP;        # int.int.nat.bool.params.storage
        PUSH int 8; # int.int.int.nat.bool.params.storage
        COMPARE;    # int.int.nat.bool.params.storage
        GT;         # bool.int.nat.bool.params.storage
      }; # int.nat.bool.params.storage
    DROP;       # nat.bool.params.storage
    # If shouldJump... # nat.bool.params.storage
    SWAP;       # bool.nat.params.storage
    DUP;        # bool.bool.nat.params.storage
    DUG 2;      # bool.nat.bool.params.storage
    IF
      {
        # sp.verify((((abs(params.target_y - params.start_y)) < 3) & ((abs(params.target_x - params.start_x)) < 3)) | (self.data.board[params.start_x][params.start_y] < 0), message = sp.unit) # nat.bool.params.storage
        PUSH nat 3; # nat.nat.bool.params.storage
        DIG 3;      # params.nat.nat.bool.storage
        DUP;        # params.params.nat.nat.bool.storage
        DUG 4;      # params.nat.nat.bool.params.storage
        CAADR;      # int.nat.nat.bool.params.storage
        DIG 4;      # params.int.nat.nat.bool.storage
        DUP;        # params.params.int.nat.nat.bool.storage
        DUG 5;      # params.int.nat.nat.bool.params.storage
        CDR;        # int.int.nat.nat.bool.params.storage
        SUB;        # int.nat.nat.bool.params.storage
        ABS;        # nat.nat.nat.bool.params.storage
        COMPARE;    # int.nat.bool.params.storage
        LT;         # bool.nat.bool.params.storage
        IF
          {
            PUSH nat 3; # nat.nat.bool.params.storage
            DIG 3;      # params.nat.nat.bool.storage
            DUP;        # params.params.nat.nat.bool.storage
            DUG 4;      # params.nat.nat.bool.params.storage
            CAAAR;      # int.nat.nat.bool.params.storage
            DIG 4;      # params.int.nat.nat.bool.storage
            DUP;        # params.params.int.nat.nat.bool.storage
            DUG 5;      # params.int.nat.nat.bool.params.storage
            CADR;       # int.int.nat.nat.bool.params.storage
            SUB;        # int.nat.nat.bool.params.storage
            ABS;        # nat.nat.nat.bool.params.storage
            COMPARE;    # int.nat.bool.params.storage
            LT;         # bool.nat.bool.params.storage
          }
          {
            PUSH bool False; # bool.nat.bool.params.storage
          }; # bool.nat.bool.params.storage
        IF
          {
            PUSH bool True; # bool.nat.bool.params.storage
          }
          {
            PUSH int 0; # int.nat.bool.params.storage
            DIG 4;      # storage.int.nat.bool.params
            DUP;        # storage.storage.int.nat.bool.params
            DUG 5;      # storage.int.nat.bool.params.storage
            CAAAAR;     # map int (map int int).int.nat.bool.params.storage
            DIG 4;      # params.map int (map int int).int.nat.bool.storage
            DUP;        # params.params.map int (map int int).int.nat.bool.storage
            DUG 5;      # params.map int (map int int).int.nat.bool.params.storage
            CAAAR;      # int.map int (map int int).int.nat.bool.params.storage
            GET;        # option (map int int).int.nat.bool.params.storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.nat.bool.params.storage
                FAILWITH;   # FAILED
              }; # map int int.int.nat.bool.params.storage
            DIG 4;      # params.map int int.int.nat.bool.storage
            DUP;        # params.params.map int int.int.nat.bool.storage
            DUG 5;      # params.map int int.int.nat.bool.params.storage
            CAADR;      # int.map int int.int.nat.bool.params.storage
            GET;        # option int.int.nat.bool.params.storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.nat.bool.params.storage
                FAILWITH;   # FAILED
              }; # int.int.nat.bool.params.storage
            COMPARE;    # int.nat.bool.params.storage
            LT;         # bool.nat.bool.params.storage
          }; # bool.nat.bool.params.storage
        IF
          {}
          {
            PUSH unit Unit; # unit.nat.bool.params.storage
            FAILWITH;   # FAILED
          }; # nat.bool.params.storage
      }
      {
        # sp.verify((((abs(params.target_y - params.start_y)) < 2) & ((abs(params.target_x - params.start_x)) < 2)) | (self.data.board[params.start_x][params.start_y] < 0), message = sp.unit) # nat.bool.params.storage
        PUSH nat 2; # nat.nat.bool.params.storage
        DIG 3;      # params.nat.nat.bool.storage
        DUP;        # params.params.nat.nat.bool.storage
        DUG 4;      # params.nat.nat.bool.params.storage
        CAADR;      # int.nat.nat.bool.params.storage
        DIG 4;      # params.int.nat.nat.bool.storage
        DUP;        # params.params.int.nat.nat.bool.storage
        DUG 5;      # params.int.nat.nat.bool.params.storage
        CDR;        # int.int.nat.nat.bool.params.storage
        SUB;        # int.nat.nat.bool.params.storage
        ABS;        # nat.nat.nat.bool.params.storage
        COMPARE;    # int.nat.bool.params.storage
        LT;         # bool.nat.bool.params.storage
        IF
          {
            PUSH nat 2; # nat.nat.bool.params.storage
            DIG 3;      # params.nat.nat.bool.storage
            DUP;        # params.params.nat.nat.bool.storage
            DUG 4;      # params.nat.nat.bool.params.storage
            CAAAR;      # int.nat.nat.bool.params.storage
            DIG 4;      # params.int.nat.nat.bool.storage
            DUP;        # params.params.int.nat.nat.bool.storage
            DUG 5;      # params.int.nat.nat.bool.params.storage
            CADR;       # int.int.nat.nat.bool.params.storage
            SUB;        # int.nat.nat.bool.params.storage
            ABS;        # nat.nat.nat.bool.params.storage
            COMPARE;    # int.nat.bool.params.storage
            LT;         # bool.nat.bool.params.storage
          }
          {
            PUSH bool False; # bool.nat.bool.params.storage
          }; # bool.nat.bool.params.storage
        IF
          {
            PUSH bool True; # bool.nat.bool.params.storage
          }
          {
            PUSH int 0; # int.nat.bool.params.storage
            DIG 4;      # storage.int.nat.bool.params
            DUP;        # storage.storage.int.nat.bool.params
            DUG 5;      # storage.int.nat.bool.params.storage
            CAAAAR;     # map int (map int int).int.nat.bool.params.storage
            DIG 4;      # params.map int (map int int).int.nat.bool.storage
            DUP;        # params.params.map int (map int int).int.nat.bool.storage
            DUG 5;      # params.map int (map int int).int.nat.bool.params.storage
            CAAAR;      # int.map int (map int int).int.nat.bool.params.storage
            GET;        # option (map int int).int.nat.bool.params.storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.nat.bool.params.storage
                FAILWITH;   # FAILED
              }; # map int int.int.nat.bool.params.storage
            DIG 4;      # params.map int int.int.nat.bool.storage
            DUP;        # params.params.map int int.int.nat.bool.storage
            DUG 5;      # params.map int int.int.nat.bool.params.storage
            CAADR;      # int.map int int.int.nat.bool.params.storage
            GET;        # option int.int.nat.bool.params.storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.nat.bool.params.storage
                FAILWITH;   # FAILED
              }; # int.int.nat.bool.params.storage
            COMPARE;    # int.nat.bool.params.storage
            LT;         # bool.nat.bool.params.storage
          }; # bool.nat.bool.params.storage
        IF
          {}
          {
            PUSH unit Unit; # unit.nat.bool.params.storage
            FAILWITH;   # FAILED
          }; # nat.bool.params.storage
      }; # nat.bool.params.storage
    # self.data.board[params.target_x][params.target_y] = self.data.board[params.start_x][params.start_y] # nat.bool.params.storage
    DIG 3;      # storage.nat.bool.params
    DUP;        # storage.storage.nat.bool.params
    DUG 4;      # storage.nat.bool.params.storage
    DUP;        # storage.storage.nat.bool.params.storage
    CAAAAR;     # map int (map int int).storage.nat.bool.params.storage
    DUP;        # map int (map int int).map int (map int int).storage.nat.bool.params.storage
    DIG 5;      # params.map int (map int int).map int (map int int).storage.nat.bool.storage
    DUP;        # params.params.map int (map int int).map int (map int int).storage.nat.bool.storage
    DUG 6;      # params.map int (map int int).map int (map int int).storage.nat.bool.params.storage
    CADR;       # int.map int (map int int).map int (map int int).storage.nat.bool.params.storage
    DUP;        # int.int.map int (map int int).map int (map int int).storage.nat.bool.params.storage
    DUG 2;      # int.map int (map int int).int.map int (map int int).storage.nat.bool.params.storage
    GET;        # option (map int int).int.map int (map int int).storage.nat.bool.params.storage
    IF_SOME
      {}
      {
        PUSH unit Unit; # unit.int.map int (map int int).storage.nat.bool.params.storage
        FAILWITH;   # FAILED
      }; # map int int.int.map int (map int int).storage.nat.bool.params.storage
    DIG 3;      # storage.map int int.int.map int (map int int).nat.bool.params.storage
    DUP;        # storage.storage.map int int.int.map int (map int int).nat.bool.params.storage
    DUG 4;      # storage.map int int.int.map int (map int int).storage.nat.bool.params.storage
    CAAAAR;     # map int (map int int).map int int.int.map int (map int int).storage.nat.bool.params.storage
    DIG 7;      # params.map int (map int int).map int int.int.map int (map int int).storage.nat.bool.storage
    DUP;        # params.params.map int (map int int).map int int.int.map int (map int int).storage.nat.bool.storage
    DUG 8;      # params.map int (map int int).map int int.int.map int (map int int).storage.nat.bool.params.storage
    CAAAR;      # int.map int (map int int).map int int.int.map int (map int int).storage.nat.bool.params.storage
    GET;        # option (map int int).map int int.int.map int (map int int).storage.nat.bool.params.storage
    IF_SOME
      {}
      {
        PUSH unit Unit; # unit.map int int.int.map int (map int int).storage.nat.bool.params.storage
        FAILWITH;   # FAILED
      }; # map int int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    DIG 7;      # params.map int int.map int int.int.map int (map int int).storage.nat.bool.storage
    DUP;        # params.params.map int int.map int int.int.map int (map int int).storage.nat.bool.storage
    DUG 8;      # params.map int int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    CAADR;      # int.map int int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    GET;        # option int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    IF_SOME
      {}
      {
        PUSH unit Unit; # unit.map int int.int.map int (map int int).storage.nat.bool.params.storage
        FAILWITH;   # FAILED
      }; # int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    SOME;       # option int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    DIG 7;      # params.option int.map int int.int.map int (map int int).storage.nat.bool.storage
    DUP;        # params.params.option int.map int int.int.map int (map int int).storage.nat.bool.storage
    DUG 8;      # params.option int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    CDR;        # int.option int.map int int.int.map int (map int int).storage.nat.bool.params.storage
    UPDATE;     # map int int.int.map int (map int int).storage.nat.bool.params.storage
    SOME;       # option (map int int).int.map int (map int int).storage.nat.bool.params.storage
    SWAP;       # int.option (map int int).map int (map int int).storage.nat.bool.params.storage
    UPDATE;     # map int (map int int).storage.nat.bool.params.storage
    SWAP;       # storage.map int (map int int).nat.bool.params.storage
    DUP;        # storage.storage.map int (map int int).nat.bool.params.storage
    DIP
      {
        CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.storage
        DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.storage
        DIP
          {
            CAR;        # pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.storage
            DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.storage
            DIP
              {
                CADR;       # nat.map int (map int int).nat.bool.params.storage
                SWAP;       # map int (map int int).nat.nat.bool.params.storage
                PAIR;       # pair (map int (map int int)) nat.nat.bool.params.storage
              }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.nat.bool.params.storage
            CDR;        # bool.pair (map int (map int int)) nat.nat.bool.params.storage
            SWAP;       # pair (map int (map int int)) nat.bool.nat.bool.params.storage
            PAIR;       # pair (pair (map int (map int int)) nat) bool.nat.bool.params.storage
          }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.nat.bool.params.storage
        CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.nat.bool.params.storage
        SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.nat.bool.params.storage
        PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.storage
      }; # storage.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.storage
    CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.storage
    SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.nat.bool.params.storage
    PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.storage
    DUG 4;      # nat.bool.params.storage.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 3;      # storage.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # self.data.board[params.start_x][params.start_y] = 0 # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
    DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CAAAAR;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 5;      # params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # params.params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 6;      # params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CAAAR;      # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 2;      # int.map int (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    GET;        # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF_SOME
      {}
      {
        PUSH unit Unit; # unit.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        FAILWITH;   # FAILED
      }; # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH (option int) (Some 0); # option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 7;      # params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # params.params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 8;      # params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CAADR;      # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    UPDATE;     # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    SOME;       # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    SWAP;       # int.option (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    UPDATE;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIP
      {
        CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIP
          {
            CAR;        # pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CADR;       # nat.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 4;      # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If shouldJump... # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    SWAP;       # bool.nat.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # bool.bool.nat.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 2;      # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # If (abs(params.target_x - params.start_x)) == 0... # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH nat 0; # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 3;      # params.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # params.params.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # params.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CAAAR;      # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 4;      # params.int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # params.params.int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 5;      # params.int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CADR;       # int.int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SUB;        # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        EQ;         # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        IF
          {
            # If params.start_y < params.target_y... # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # params.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # params.params.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # params.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 3;      # params.int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # params.params.int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 4;      # params.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CAADR;      # int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            LT;         # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # sp.verify((abs(self.data.board[params.target_x][params.target_y - 1])) != self.data.currentPlayer, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAADR;     # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # sp.verify((abs(self.data.board[params.target_x][params.target_y - 1])) != 0, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH nat 0; # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # self.data.board[params.target_x][params.target_y - 1] = 0 # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.map int (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH (option int) (Some 0); # option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 8;      # params.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 9;      # params.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SOME;       # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # int.option (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIP
                  {
                    CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIP
                      {
                        CAR;        # pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIP
                          {
                            CADR;       # nat.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            SWAP;       # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            PAIR;       # pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                          }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        CDR;        # bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PAIR;       # pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                # sp.verify((abs(self.data.board[params.target_x][params.target_y + 1])) != self.data.currentPlayer, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAADR;     # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # sp.verify((abs(self.data.board[params.target_x][params.target_y + 1])) != 0, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH nat 0; # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # self.data.board[params.target_x][params.target_y + 1] = 0 # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.map int (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH (option int) (Some 0); # option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 8;      # params.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 9;      # params.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SOME;       # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # int.option (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIP
                  {
                    CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIP
                      {
                        CAR;        # pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIP
                          {
                            CADR;       # nat.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            SWAP;       # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            PAIR;       # pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                          }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        CDR;        # bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PAIR;       # pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }
          {
            # If params.target_x > params.start_x... # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # params.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # params.params.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # params.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CAAAR;      # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 3;      # params.int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # params.params.int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 4;      # params.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CADR;       # int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GT;         # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # sp.verify((abs(self.data.board[params.target_x - 1][params.target_y])) != self.data.currentPlayer, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAADR;     # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # sp.verify((abs(self.data.board[params.target_x - 1][params.target_y])) != 0, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH nat 0; # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # self.data.board[params.target_x - 1][params.target_y] = 0 # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.map int (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH (option int) (Some 0); # option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SOME;       # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # int.option (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIP
                  {
                    CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIP
                      {
                        CAR;        # pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIP
                          {
                            CADR;       # nat.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            SWAP;       # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            PAIR;       # pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                          }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        CDR;        # bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PAIR;       # pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                # sp.verify((abs(self.data.board[params.target_x + 1][params.target_y])) != self.data.currentPlayer, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAADR;     # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # sp.verify((abs(self.data.board[params.target_x + 1][params.target_y])) != 0, message = sp.unit) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH nat 0; # nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params
                DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int (map int int).nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.nat.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # params.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                NEQ;        # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {}
                  {
                    PUSH unit Unit; # unit.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # self.data.board[params.target_x + 1][params.target_y] = 0 # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params
                DUG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.map int (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH (option int) (Some 0); # option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.option int.map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int int.int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SOME;       # option (map int int).int.map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # int.option (map int int).map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                UPDATE;     # map int (map int int).pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIP
                  {
                    CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIP
                      {
                        CAR;        # pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIP
                          {
                            CADR;       # nat.map int (map int int).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            SWAP;       # map int (map int int).nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                            PAIR;       # pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                          }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        CDR;        # bool.pair (map int (map int int)) nat.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PAIR;       # pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # continueMove = sp.newLocal("continueMove", False, sp.TBool) # nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH bool False; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If params.target_x > 1... # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 1; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # params.params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 5;      # params.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CADR;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    GT;         # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        DIG 3;      # params.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # params.params.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # params.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CADR;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # for k in sp.range(0, params.target_x): ... (sp.TInt) # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 2;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 3;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        GT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        LOOP
          {
            # If (((~ continueMove) & (self.data.board[k][params.target_y] == 0)) & ((abs(self.data.board[k + 1][params.target_y])) == enemyPlayer)) & (((self.data.board[params.target_x][params.target_y] > -1) & (k == (params.target_x - 2))) | (self.data.board[params.target_x][params.target_y] < 0))... # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # bool.bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            NOT;        # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int 0; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                DIG 3;      # nat.int.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # nat.nat.int.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.int.bool.nat.bool.params
                DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # int.int.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # int.int.map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int int.nat.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.nat.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int -1; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH int 2; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # params.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 7;      # params.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SUB;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    EQ;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH bool True; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH int 0; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                    DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 7;      # params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 8;      # params.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 7;      # params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 8;      # params.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    LT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # continueMove.set(True) # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH bool True; # bool.bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # bool.bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # for kk in sp.range(k + 2, params.target_x): ... (sp.TInt) # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 2; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                LOOP
                  {
                    # If self.data.board[kk][params.target_y] != 0... # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.bool.nat.bool.params
                    DUG 10;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.map int (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 9;      # params.map int int.int.int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int int.int.int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 10;     # params.map int int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.map int int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    NEQ;        # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF
                      {
                        # continueMove.set(False) # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIG 4;      # bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PUSH bool False; # bool.bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # bool.bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DROP;       # bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUG 4;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }
                      {}; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    # loop step # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 1; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    ADD;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GT;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # loop step # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 1; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            ADD;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If params.target_x < 6... # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 6; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # params.params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 5;      # params.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CADR;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    LT;         # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # for k in sp.range(params.target_x, 7): ... (sp.TInt) # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 3;      # params.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # params.params.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # params.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CADR;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 7; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        GT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        LOOP
          {
            # If (((~ continueMove) & (self.data.board[k][params.target_y] == 0)) & ((abs(self.data.board[k - 1][params.target_y])) == enemyPlayer)) & (((self.data.board[params.target_x][params.target_y] > -1) & (k == (params.target_y + 2))) | (self.data.board[params.target_x][params.target_y] < 0))... # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # bool.bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 2;      # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            NOT;        # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.map int (map int int).int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int (map int int).int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                DIG 2;      # nat.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # nat.nat.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.bool.nat.bool.params
                DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # int.int.map int (map int int).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.map int (map int int).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # int.int.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SUB;        # int.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int int.nat.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.nat.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int -1; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH int 2; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 5;      # params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 6;      # params.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    ADD;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 2;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    EQ;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH bool True; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                    DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 7;      # params.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 7;      # params.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    LT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # continueMove.set(True) # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH bool True; # bool.bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # bool.bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # for kk in sp.range(params.target_x, k): ... (sp.TInt) # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                LOOP
                  {
                    # If self.data.board[kk][params.target_y] != 0... # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 0; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
                    DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 8;      # params.map int int.int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int int.int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 9;      # params.map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    NEQ;        # bool.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF
                      {
                        # continueMove.set(False) # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIG 3;      # bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PUSH bool False; # bool.bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # bool.bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DROP;       # bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUG 3;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }
                      {}; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    # loop step # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 1; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    ADD;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GT;         # bool.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # loop step # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 1; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            ADD;        # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 7; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If params.target_y < 6... # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 6; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # params.params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 5;      # params.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CDR;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    LT;         # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # for k in sp.range(params.target_y + 1, 7): ... (sp.TInt) # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 1; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 4;      # params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # params.params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 5;      # params.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        ADD;        # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 7; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        GT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        LOOP
          {
            # If (((~ continueMove) & (self.data.board[params.target_x][k + 1] == 0)) & ((abs(self.data.board[params.target_x][k])) == enemyPlayer)) & (((self.data.board[params.target_x][params.target_y] > -1) & (k == (params.target_y + 1))) | (self.data.board[params.target_x][params.target_y] < 0))... # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # bool.bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 2;      # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            NOT;        # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # int.int.map int int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.map int int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # int.int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                DIG 2;      # nat.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # nat.nat.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.bool.nat.bool.params
                DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int (map int int).nat.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).nat.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.map int int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int -1; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH int 1; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 5;      # params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 6;      # params.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    ADD;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 2;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    EQ;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH bool True; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params
                    DUG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int (map int int).int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 7;      # params.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.map int (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 7;      # params.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    LT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # continueMove.set(True) # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH bool True; # bool.bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # bool.bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # bool.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # for kk in sp.range(params.target_y + 1, k): ... (sp.TInt) # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 6;      # params.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 7;      # params.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                LOOP
                  {
                    # If self.data.board[params.target_x][kk] != 0... # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 0; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
                    DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 8;      # params.map int (map int int).int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int (map int int).int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 9;      # params.map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.map int (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    NEQ;        # bool.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF
                      {
                        # continueMove.set(False) # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIG 3;      # bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PUSH bool False; # bool.bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # bool.bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DROP;       # bool.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUG 3;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }
                      {}; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    # loop step # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 1; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    ADD;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GT;         # bool.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # loop step # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 1; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            ADD;        # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 7; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GT;         # bool.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If params.target_y > 1... # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 1; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # params.params.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 5;      # params.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    CDR;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    GT;         # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        DIG 3;      # params.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # params.params.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # params.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # for k in sp.range(0, params.target_y): ... (sp.TInt) # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 2;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 3;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        GT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        LOOP
          {
            # If (((~ continueMove) & (self.data.board[params.target_x][k] == 0)) & ((abs(self.data.board[params.target_x][k + 1])) == enemyPlayer)) & (((self.data.board[params.target_x][params.target_y] > -1) & (k == (params.target_y - 2))) | (self.data.board[params.target_x][params.target_y] < 0))... # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # bool.bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            NOT;        # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int 0; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.map int int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                DIG 3;      # nat.int.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # nat.nat.int.int.bool.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.int.bool.nat.bool.params
                DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int (map int int).nat.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).nat.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # int.int.map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.map int int.nat.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # int.int.map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.map int int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ABS;        # nat.nat.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                EQ;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                PUSH int -1; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CAAAAR;     # map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CADR;       # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 7;      # params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 8;      # params.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GET;        # option int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    FAILWITH;   # FAILED
                  }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH int 2; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 6;      # params.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 7;      # params.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SUB;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    EQ;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                IF
                  {
                    PUSH bool True; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }
                  {
                    PUSH int 0; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 7;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params
                    DUG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 7;      # params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int (map int int).int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 8;      # params.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.map int (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 7;      # params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 8;      # params.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # int.map int int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    LT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {
                PUSH bool False; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # continueMove.set(True) # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH bool True; # bool.bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # bool.bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # bool.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # params.params.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 6;      # params.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                # for kk in sp.range(k + 2, params.target_y): ... (sp.TInt) # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 2; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                GT;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                LOOP
                  {
                    # If self.data.board[params.target_x][kk] != 0... # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.bool.nat.bool.params
                    DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.bool.nat.bool.params
                    DUG 10;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CAAAAR;     # map int (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 9;      # params.map int (map int int).int.int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # params.params.map int (map int int).int.int.int.int.int.bool.nat.bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 10;     # params.map int (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CADR;       # int.map int (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option (map int int).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # map int int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.map int int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.map int int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GET;        # option int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        FAILWITH;   # FAILED
                      }; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    NEQ;        # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    IF
                      {
                        # continueMove.set(False) # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DIG 4;      # bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PUSH bool False; # bool.bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        SWAP;       # bool.bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DROP;       # bool.int.int.int.int.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        DUG 4;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }
                      {}; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    # loop step # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PUSH int 1; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    ADD;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIG 2;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    GT;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DROP;       # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # loop step # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 1; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            ADD;        # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GT;         # bool.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If ~ (continueMove & shouldJump)... # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        DIG 2;      # bool.bool.nat.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # bool.bool.bool.nat.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 3;      # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    NOT;        # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # If self.data.currentPlayer == 1... # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH nat 1; # nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params
        DUG 6;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CAAADR;     # nat.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        EQ;         # bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        IF
          {
            # self.data.currentPlayer = 2 # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params
            DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH nat 2; # nat.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIP
                  {
                    CAR;        # pair (pair (map int (map int int)) nat) bool.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIP
                      {
                        CAAR;       # map int (map int int).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PAIR;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # bool.pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # pair (map int (map int int)) nat.bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PAIR;       # pair (pair (map int (map int int)) nat) bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 5;      # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DROP;       # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }
          {
            # self.data.currentPlayer = 1 # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params
            DUG 5;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH nat 1; # nat.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIP
                  {
                    CAR;        # pair (pair (map int (map int int)) nat) bool.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DUP;        # pair (pair (map int (map int int)) nat) bool.pair (pair (map int (map int int)) nat) bool.nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    DIP
                      {
                        CAAR;       # map int (map int int).nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                        PAIR;       # pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                      }; # pair (pair (map int (map int int)) nat) bool.pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    CDR;        # bool.pair (map int (map int int)) nat.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    SWAP;       # pair (map int (map int int)) nat.bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                    PAIR;       # pair (pair (map int (map int int)) nat) bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                  }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 5;      # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 4;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DROP;       # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # player1Damas = sp.newLocal("player1Damas", 0, sp.TIntOrNat) # bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # player1DamasKing = sp.newLocal("player1DamasKing", 0, sp.TIntOrNat) # int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # player2Damas = sp.newLocal("player2Damas", 0, sp.TIntOrNat) # int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # player2DamasKing = sp.newLocal("player2DamasKing", 0, sp.TIntOrNat) # int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # for x in sp.range(0, 8): ... (sp.TInt) # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH bool True; # bool.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    LOOP
      {
        # for y in sp.range(0, 8): ... (sp.TInt) # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 0; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH bool True; # bool.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        LOOP
          {
            # If self.data.board[x][y] == 1... # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 11;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUG 12;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CAAAAR;     # map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 3;      # int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 4;      # int.map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # int.map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            EQ;         # bool.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # player1Damas += 1 # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 5;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 5;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # If self.data.board[x][y] == -1... # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int -1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 11;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUG 12;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CAAAAR;     # map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 3;      # int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 4;      # int.map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # int.map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            EQ;         # bool.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # player1DamasKing += 1 # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 4;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 4;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # If self.data.board[x][y] == 2... # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 2; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 11;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUG 12;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CAAAAR;     # map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 3;      # int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 4;      # int.map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # int.map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            EQ;         # bool.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # player2Damas += 1 # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # If self.data.board[x][y] == -2... # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int -2; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 11;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params
            DUG 12;     # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CAAAAR;     # map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 3;      # int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int (map int int).int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 4;      # int.map int (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option (map int int).int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIG 2;      # int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.map int int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUG 3;      # int.map int int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GET;        # option int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                FAILWITH;   # FAILED
              }; # int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            EQ;         # bool.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            IF
              {
                # player2DamasKing += 1 # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DIG 2;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PUSH int 1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                ADD;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                DUG 2;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }
              {}; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            # loop step # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 1; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            ADD;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PUSH int 8; # int.int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            COMPARE;    # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            GT;         # bool.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # loop step # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 1; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        ADD;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 8; # int.int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        GT;         # bool.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If (player1Damas == 0) & (player1DamasKing == 0)... # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 5;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # self.data.isOver = True # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH bool True; # bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIP
          {
            CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CAAR;       # pair (map int (map int int)) nat.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # self.data.winner = 2 # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 2; # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If (player2Damas == 0) & (player2DamasKing == 0)... # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 2;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 0; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # self.data.isOver = True # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH bool True; # bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIP
          {
            CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CAAR;       # pair (map int (map int int)) nat.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # self.data.winner = 1 # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 1; # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If ((player1Damas == 1) & (player1DamasKing == 0)) & (player2DamasKing > 0)... # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 1; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 5;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 0; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        LT;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # self.data.isOver = True # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH bool True; # bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIP
          {
            CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CAAR;       # pair (map int (map int int)) nat.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # self.data.winner = 2 # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 2; # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    # If ((player2Damas == 1) & (player2DamasKing == 0)) & (player1DamasKing > 0)... # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PUSH int 1; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 2;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DUG 3;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        DUP;        # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 0; # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        EQ;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        PUSH int 0; # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 3;      # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 4;      # int.int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        COMPARE;    # int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        GT;         # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {
        PUSH bool False; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }; # bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    IF
      {
        # self.data.isOver = True # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH bool True; # bool.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIP
          {
            CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DUP;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (pair (map int (map int int)) nat) bool) (map int address).bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            DIP
              {
                CAAR;       # pair (map int (map int int)) nat.bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
                PAIR;       # pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
              }; # pair (pair (pair (map int (map int int)) nat) bool) (map int address).pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            CDR;        # map int address.pair (pair (map int (map int int)) nat) bool.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            SWAP;       # pair (pair (map int (map int int)) nat) bool.map int address.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
            PAIR;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
          }; # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CDR;        # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        # self.data.winner = 1 # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUP;        # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params
        DUG 9;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        CAR;        # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PUSH int 1; # int.pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        SWAP;       # pair (pair (pair (map int (map int int)) nat) bool) (map int address).int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        PAIR;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DUG 9;      # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DIG 8;      # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int.int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
        DROP;       # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
      }
      {}; # int.int.int.int.bool.nat.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 6;      # bool.int.int.int.int.bool.nat.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.int.int.int.bool.nat.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 5;      # nat.int.int.int.int.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.int.int.int.bool.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 4;      # bool.int.int.int.int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.int.int.int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 3;      # int.int.int.int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.int.int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DIG 2;      # int.int.int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # int.params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # params.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    DROP;       # pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    NIL operation; # list operation.pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int
    PAIR;       # pair (list operation) (pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int)
  } # pair (list operation) (pair (pair (pair (pair (map int (map int int)) nat) bool) (map int address)) int);